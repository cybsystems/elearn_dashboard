{"version":3,"sources":["pages/DashboardPage.js","utils/colors.js"],"names":["DashboardPage","Date","window","scrollTo","availableColor","arguments","length","undefined","getComputedStyle","document","documentElement","getPropertyValue","concat","getColor","react_default","a","createElement","Page","className","title","breadcrumbs","name","active","React","Component"],"mappings":"mKASMA,GAHQ,IAAIC,iMAMdC,OAAOC,SAAS,EAAG,qCCYC,WAAgC,IAA/BC,EAA+BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAd,UAClB,qBAAXH,QAIGA,OACXM,iBAAiBC,SAASC,iBAC1BC,iBAFW,KAAAC,OAEWR,IDfFS,CAAS,WAE9B,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,UAAU,gBACVC,MAAM,YACNC,YAAa,CAAC,CAAEC,KAAM,YAAaC,QAAQ,aAbvBC,IAAMC,YAoBnBxB","file":"static/js/3.37e6fa3f.chunk.js","sourcesContent":["import Page from 'components/Page';\r\n  \r\nimport React from 'react';\r\n\r\nimport { getColor } from 'utils/colors';\r\n\r\nconst today = new Date();\r\n \r\n\r\nclass DashboardPage extends React.Component {\r\n  componentDidMount() {\r\n    // this is needed, because InfiniteCalendar forces window scroll\r\n    window.scrollTo(0, 0);\r\n  }\r\n\r\n  render() {\r\n    const primaryColor = getColor('primary');\r\n \r\n    return (\r\n      <Page\r\n        className=\"DashboardPage\"\r\n        title=\"Dashboard\"\r\n        breadcrumbs={[{ name: 'Dashboard', active: true }]}\r\n      >\r\n       \r\n      </Page>\r\n    );\r\n  }\r\n}\r\nexport default DashboardPage;\r\n","// const availableColors = [\r\n//   'blue',\r\n//   'indigo',\r\n//   'purple',\r\n//   'pink',\r\n//   'red',\r\n//   'orange',\r\n//   'yellow',\r\n//   'green',\r\n//   'teal',\r\n//   'cyan',\r\n//   'white',\r\n//   'gray',\r\n//   'gray-dark',\r\n//   'primary',\r\n//   'secondary',\r\n//   'success',\r\n//   'info',\r\n//   'warning',\r\n//   'danger',\r\n//   'light',\r\n//   'dark',\r\n// ];\r\n\r\nexport const getColor = (availableColor = 'primary') => {\r\n  if (typeof window === 'undefined') {\r\n    return null;\r\n  }\r\n\r\n  const color = window\r\n    .getComputedStyle(document.documentElement)\r\n    .getPropertyValue(`--${availableColor}`);\r\n\r\n  return color;\r\n};\r\n\r\nexport const getThemeColors = () => [\r\n  'primary',\r\n  'secondary',\r\n  'success',\r\n  'info',\r\n  'warning',\r\n  'danger',\r\n];\r\n"],"sourceRoot":""}